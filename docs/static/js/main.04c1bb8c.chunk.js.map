{"version":3,"sources":["components/AddCategory.js","helpers/functions.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","title","handleAddCategory","useState","texto","setTexto","onSubmit","e","preventDefault","trim","type","value","onChange","target","defaultProps","getGifs","item","a","dataSend","api_key","q","limit","oUrl","URL","search","URLSearchParams","toString","oPeticion","fetch","then","resp","json","catch","error","response","data","gifs","map","id","url","images","original","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","setTimeout","useFetchGifs","image","GifExpertApp","categories","setCategories","newValue","cats","c","divRoot","document","querySelector","ReactDOM","render"],"mappings":"mMAGMA,EAAc,SAAC,GAAmC,EAAhCC,MAAiC,IAA1BC,EAAyB,EAAzBA,kBAC3B,EAA4BC,mBAAS,IAArC,mBAAQC,EAAR,KAAeC,EAAf,KAYA,OAAO,mCACH,sBAAMC,SAPW,SAACC,GAClBA,EAAEC,iBACmB,KAAjBJ,EAAMK,QAAgBP,EAAmBE,GAC7CC,EAAU,KAIV,SACI,uBACIK,KAAK,OACLC,MAAQP,EACRQ,SAfS,SAACL,GAClBF,EAAUE,EAAEM,OAAOF,eA0B3BX,EAAYc,aAAe,CACvBb,MAAO,gB,mCChCLc,EAAO,uCAAG,WAAQC,GAAR,yBAAAC,EAAA,6DACNC,EAAW,CACbC,QAAS,mCACTC,EAAGJ,EACHK,MAAO,KAGLC,EAAO,IAAIC,IAAI,yCAChBC,OAAS,IAAIC,gBAAgBP,GAAUQ,WAEtCC,EAAYC,MAAMN,GAVZ,SAYWK,EAAUE,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAAQC,OAAO,SAAAC,GAAK,OAAIA,KAZ/D,cAYNC,EAZM,OAcJC,EAASD,EAATC,KAEFC,EAAOD,EAAKE,KAAK,SAAA9B,GAAC,MACnB,CACG+B,GAAI/B,EAAE+B,GACNrC,MAAOM,EAAEN,MACTsC,IAAKhC,EAAEiC,OAAOC,SAASF,QApBnB,kBAwBLH,GAxBK,4CAAH,sDCAPM,EAAc,SAAC,GAAoB,IAAlBzC,EAAiB,EAAjBA,MAAOsC,EAAU,EAAVA,IAE1B,OAAO,mCACH,qBAAKI,UAAU,mDAAf,SACI,qBAAKC,IAAML,EAAMM,IAAM5C,SAUnCyC,EAAY5B,aAAe,CACvBb,MAAO,ICbX,IAAM6C,EAAU,SAAC,GAAc,IAAZ9B,EAAW,EAAXA,KAEf,ECHiB,SAACA,GAElB,MAA0Bb,mBAAS,CAC/BgC,KAAM,GACNY,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAU,WACNnC,EAAQC,GACHa,MACG,SAAAO,GAAI,OAAIe,YAAW,WACfF,EAAS,CACLd,KAAMC,EACNW,SAAS,MAEd,UAEZ,CAAC/B,IAEGgC,EDhB2BI,CAAapC,GAAjCwB,EAAd,EAAQL,KAAcY,EAAtB,EAAsBA,QAEtB,OAAO,mCACH,sBAAKJ,UAAU,YAAf,UACI,6BAAM3B,IACJ+B,GAAW,mBAAGJ,UAAU,oFAAb,yBAUb,qBAAKA,UAAU,cAAf,SAEQH,EAAOH,KAAK,SAAAgB,GAAK,OACb,cAAC,EAAD,eAESA,GADCA,EAAMf,eEpBlCgB,EAAe,SAAC,GAAe,IAAbrD,EAAY,EAAZA,MACpB,EAAoCE,mBAAS,CAAC,cAA9C,mBAAOoD,EAAP,KAAmBC,EAAnB,KAMA,OAAO,qCACH,6BAAMvD,IACN,cAAC,EAAD,CAAaC,kBANS,SAACuD,GACvBD,GAAe,SAAAE,GAAI,OAAMD,GAAN,mBAAmBC,UAMtC,uBAEA,6BAEQH,EAAWlB,KAAK,SAAAsB,GAAC,OACb,cAAC,EAAD,CAAmB3C,KAAO2C,GAAXA,YAWnCL,EAAaxC,aAAe,CACxBb,MAAO,gBAGIqD,QC5BTM,G,YAAUC,SAASC,cAAc,UAEvCC,IAASC,OAAQ,cAAC,EAAD,IAAkBJ,K","file":"static/js/main.04c1bb8c.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\r\nimport { useState } from 'react'\r\n\r\nconst AddCategory = ( { title, handleAddCategory } ) => {\r\n    const [ texto, setTexto ] = useState('')\r\n\r\n    const handleChange = (e) => {\r\n        setTexto( e.target.value )\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        if( texto.trim() !== '' ) handleAddCategory( texto )\r\n        setTexto( '' )\r\n    }\r\n    \r\n    return <>\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                value={ texto }\r\n                onChange={ handleChange }\r\n            />\r\n        </form>\r\n    </>\r\n\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    handleAddCategory: PropTypes.func.isRequired\r\n}\r\n\r\nAddCategory.defaultProps = {\r\n    title: 'Add Category'\r\n}\r\n\r\nexport {\r\n    AddCategory as default\r\n}","\r\n\r\nconst getGifs = async ( item ) => {\r\n    const dataSend = {\r\n        api_key: 'sJ84d7bZo5N8Q1EonLJNxPwu9BJBELhd',\r\n        q: item,\r\n        limit: 10\r\n    }\r\n\r\n    const oUrl = new URL('https://api.giphy.com/v1/gifs/search')\r\n    oUrl.search = new URLSearchParams(dataSend).toString()\r\n\r\n    const oPeticion = fetch(oUrl)\r\n\r\n    const response = await oPeticion.then(resp => resp.json()).catch( error => error )\r\n\r\n    const { data } = response\r\n\r\n    const gifs = data.map( e =>\r\n        ({\r\n            id: e.id,\r\n            title: e.title,\r\n            url: e.images.original.url\r\n        })\r\n    )\r\n\r\n    return gifs\r\n}\r\n\r\nexport {\r\n    getGifs\r\n}","import PropTypes from 'prop-types'\r\n\r\nconst GifGridItem = ({ title, url }) => {\r\n\r\n    return <>\r\n        <div className=\"div-img animate__animated animate__fadeInTopLeft\">\r\n            <img src={ url } alt={ title } />\r\n        </div>\r\n    </>\r\n\r\n}\r\n\r\nGifGridItem.propTypes = {\r\n    title: PropTypes.string.isRequired\r\n}\r\n\r\nGifGridItem.defaultProps = {\r\n    title: ''\r\n}\r\n\r\nexport {\r\n    GifGridItem as default\r\n}","import PropTypes from 'prop-types'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport GifGridItem from './GifGridItem'\r\n\r\nconst GifGrid = ({ item }) => {\r\n\r\n    const { data: images, loading } = useFetchGifs(item)\r\n    \r\n    return <>\r\n        <div className=\"card-grid\">\r\n            <h4>{ item }</h4>\r\n            { loading && <p className=\"\r\n                                animate__animated \r\n                                animate__infinite \r\n                                animate__slower \r\n                                animate__flash\r\n                            \"\r\n                          >\r\n                            Cargando...\r\n                          </p> \r\n            }\r\n            <div className=\"img-content\">\r\n                {\r\n                    images.map( image => \r\n                        <GifGridItem  \r\n                            key={ image.id } \r\n                            { ...image } \r\n                        /> \r\n                    )\r\n                }\r\n            </div>\r\n        </div>\r\n    </>\r\n\r\n}\r\n\r\nGifGrid.propTypes = {\r\n    item: PropTypes.string.isRequired\r\n}\r\n\r\nexport {\r\n    GifGrid as default\r\n}","import { useState, useEffect } from 'react'\r\nimport { getGifs } from './../helpers/functions'\r\n\r\nconst useFetchGifs = (item) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(() => {\r\n        getGifs(item)\r\n            .then(\r\n                gifs => setTimeout(() => {\r\n                    setState({\r\n                        data: gifs,\r\n                        loading: false\r\n                    })\r\n                }, 3000)\r\n            )\r\n    }, [item])\r\n\r\n    return state\r\n}\r\n\r\n\r\nexport {\r\n    useFetchGifs\r\n}","import { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport AddCategory from './AddCategory'\r\nimport GifGrid from './GifGrid'\r\n\r\nconst GifExpertApp = ({ title }) => {\r\n    const [categories, setCategories] = useState(['One Punch'])\r\n\r\n    const handleAddCategory = (newValue) => {\r\n        setCategories( cats => [ newValue, ...cats ] )\r\n    }\r\n\r\n    return <>\r\n        <h2>{ title }</h2>\r\n        <AddCategory handleAddCategory={ handleAddCategory } />\r\n        <hr />\r\n\r\n        <ol>\r\n            {\r\n                categories.map( c => \r\n                    <GifGrid key={ c } item={ c } /> \r\n                )\r\n            }\r\n        </ol>\r\n    </>\r\n}\r\n\r\nGifExpertApp.propTypes = {\r\n    title: PropTypes.string.isRequired\r\n}\r\n\r\nGifExpertApp.defaultProps = {\r\n    title: 'GifExpertApp'\r\n}\r\n\r\nexport default GifExpertApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './components/GifExpertApp';\n\nimport 'animate.css'\nimport './index.css';\n\nconst divRoot = document.querySelector('#root')\n\nReactDOM.render( <GifExpertApp />, divRoot )"],"sourceRoot":""}